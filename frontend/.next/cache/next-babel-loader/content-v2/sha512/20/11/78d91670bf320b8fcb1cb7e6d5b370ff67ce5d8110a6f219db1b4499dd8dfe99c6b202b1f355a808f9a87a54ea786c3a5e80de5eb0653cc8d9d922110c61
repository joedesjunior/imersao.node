{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\joede\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\imersaoNode\\\\frontend\\\\pages\\\\create.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nfunction create() {\n  const {\n    0: meta,\n    1: setMeta\n  } = useState({\n    name: '',\n    description: '',\n    status: ''\n  });\n  const {\n    0: response,\n    1: setResponse\n  } = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  });\n\n  const onchangeInput = e => setMeta(_objectSpread(_objectSpread({}, meta), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const sendMeta = async e => {\n    e.preventDefault();\n    setResponse({\n      formSave: true\n    });\n\n    try {\n      const res = await fetch(`http://localhost:8000/cadastrarMetas`, {\n        method: 'POST',\n        body: JSON.stringify(meta),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseEnv = await res.json();\n\n      if (responseEnv.error) {\n        setResponse({\n          formSave: false,\n          type: 'error',\n          message: responseEnv.message\n        });\n      } else {\n        setResponse({\n          formSave: false,\n          type: 'success',\n          message: responseEnv.message\n        });\n      }\n    } catch (err) {\n      setResponse({\n        formSave: false,\n        type: 'error',\n        message: 'Error'\n      });\n    }\n\n    ;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cadastrar Nova meta\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 38\n    }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 40\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMeta,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Nome: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        placeholder: \"Nome da meta: \",\n        onChange: onchangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Descri\\xE7\\xE3o: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"description\",\n        id: \"description\",\n        placeholder: \"Descri\\xE7\\xE3o da meta: \",\n        onChange: onchangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Status: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"status\",\n        id: \"status\",\n        placeholder: \"Status da meta: \",\n        onChange: onchangeInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: true,\n        children: \"Cadastrando...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"chch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 91\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\nexport default create;","map":{"version":3,"sources":["C:/Users/joede/OneDrive/Área de Trabalho/imersaoNode/frontend/pages/create.js"],"names":["React","useState","Jumbotron","create","meta","setMeta","name","description","status","response","setResponse","formSave","type","message","onchangeInput","e","target","value","sendMeta","preventDefault","res","fetch","method","body","JSON","stringify","headers","responseEnv","json","error","err"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {Jumbotron} from 'reactstrap';\r\n\r\nfunction create() {\r\n\r\n    const [meta, setMeta] = useState({\r\n        name: '', \r\n        description: '', \r\n        status: '',\r\n    })\r\n\r\n    const [ response, setResponse] = useState({\r\n        formSave: false, \r\n        type: '',\r\n        message: '', \r\n    })\r\n\r\n    const onchangeInput = e => setMeta({...meta, [e.target.name]: e.target.value})\r\n\r\n    const sendMeta = async e => {\r\n        \r\n        e.preventDefault();\r\n        \r\n        setResponse({formSave: true});\r\n\r\n        try{\r\n        const res = await fetch(`http://localhost:8000/cadastrarMetas`, {\r\n            method: 'POST', \r\n            body:   JSON.stringify(meta),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        const responseEnv = await res.json();\r\n\r\n        if(responseEnv.error) {\r\n            setResponse({\r\n                formSave: false, \r\n                type: 'error',\r\n                message: responseEnv.message, \r\n            })\r\n        } else {\r\n            setResponse({\r\n                formSave: false, \r\n                type: 'success',\r\n                message: responseEnv.message, \r\n            })\r\n        }\r\n\r\n    } catch (err) {\r\n        setResponse({\r\n            formSave: false, \r\n            type: 'error',\r\n            message: 'Error', \r\n        })\r\n    };\r\n}\r\n\r\n    return (\r\n        <>\r\n        <h1>Cadastrar Nova meta</h1>\r\n\r\n        {response.type === 'error' ? <p>{response.message}</p> : \"\"}\r\n        {response.type === 'success' ? <p>{response.message}</p> : \"\"}\r\n\r\n        <form onSubmit={sendMeta}>\r\n            <label>Nome: </label>\r\n            <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Nome da meta: \" onChange={onchangeInput} />\r\n            <br/>\r\n\r\n            <label>Descrição: </label>\r\n            <input type=\"text\" name=\"description\" id=\"description\" placeholder=\"Descrição da meta: \" onChange={onchangeInput} />\r\n            <br/>\r\n\r\n            <label>Status: </label>\r\n            <input type=\"text\" name=\"status\" id=\"status\" placeholder=\"Status da meta: \" onChange={onchangeInput}/>\r\n            <br/>\r\n\r\n            {response.formSave ? <button type=\"submit\" disabled>Cadastrando...</button> : <button type=\"submit\">chch</button> }\r\n        </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default create;"]},"metadata":{},"sourceType":"module"}